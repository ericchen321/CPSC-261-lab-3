.pos 0x100
main:
    irmovq $stackEnd, %rsp                  # set rsp to point to bottom of stack (highest addresss)
    irmovq $array, %rdi                     # set rdi as long* array
    irmovq $arraySize, %rsi                 # rsi = address holding arraySize
    mrmovq (%rsi), %rsi                     # rsi has arraysize
    irmovq $resultStart, %rdx               # rdx has address holding max array's starting address
    irmovq $resultEnd, %rcx                 # rcx has address holding max array's ending address
    call   maxSubArray                      # call maxsa
    irmovq $resultSum, %r8                  # set r8 as address holding returned sum
    rmmovq %rax, (%r8)                      # M[r8] <- returned sum
    halt                                    # stop the main

.pos 0x1000
maxSubArray:
    pushq  %rbx                             # save rbx to stack
    pushq  %rbp                             # save rbp to stack
    pushq  %r12                             # save r12 to stack
    pushq  %r13                             # save r13 to stack
    pushq  %r14                             # save r14 to stack
    irmovq $1, %r9                          # r9 = 1
    subq   %rsi, %r9                        # r9 = size - 1
    jne    L1                               # if (r9 != 0, i.e. size != 1), then jump to L1
    rmmovq %rdi, (%rcx)                     # else save array's starting address as max array's starting address
    rmmovq %rdi, (%rdx)                     # save array's ending address as max array's ending address
    mrmovq (%rdi), %r13                     # r13 = value of first element in array
    jmp    L9                               # go to L9
L1:
    irmovq $2, %r10                         # r10 = 2
    rrmovq %rsi, %rbx                       # rbx = size
    divq   %r10, %rbx                       # rbx has half, half = size >> 1
    irmovq $8, %rbp                         # rbp = 8
    mulq   %rbx, %rbp                       # rbp = 8 * half (offset)
    addq   %rdi, %rbp                       # rbp is long* mid, rbp = array base + offset
    irmovq $8, %r8                          # r8 = 8
    rrmovq %rsi, %r9                        # r9 has array size
    mulq   %r8, %r9                         # r9 = 8 * array size (size offset)
    addq   %rdi, %r9                        # r9 = array base + size offset
    subq   %r8, %r9                         # r9 is long* end, r9 = array + base + size offset - 1
    xorq   %rax, %rax                       # rax has sum, sum = 0
    irmovq $0x8000000000000000, %r10        # r10 has left_sum, leftsum = LONG_MIN
    rrmovq %rbp, %r11                       # r11 = mid
    subq   %r8, %r11                        # r11 has ptr, ptr = mid - 1


L2:                                         # loop: for (ptr = mid - 1, sum = 0; ptr >= array; ptr--)
    rrmovq %r11, %r12                       # r12 = ptr
    subq   %rdi, %r12                       # r12 = ptr - array
    jl     L4                               # ptr < array, exit loop
    mrmovq (%r11), %r12                     # r12 = M[ptr]
    addq   %r12, %rax                       # sum+=*ptr
    rrmovq %rax, %r12                       # r12 = sum
    subq   %r10, %r12                       # r12 = sum - leftsum
    jle    L3                               # if (sum <= leftsum), jump to L3
    rrmovq %rax, %r10                       # left_sum = sum
    rmmovq %r11, (%rdx)                     # *sa_start = ptr
L3:
    subq   %r8, %r11                        # ptr-- 
    jmp    L2                               # jump to first instruction in the loop


L4:
    irmovq $0x8000000000000000, %r13        # r13 has right_sum, right_sum = LONG_MIN
    rrmovq %rbp, %r11                       # r11 has ptr, ptr = mid
    xorq   %rax, %rax                       # sum = 0


L5:                                         # loop: for (ptr = mid, sum = 0; ptr <= end; ptr++)
    rrmovq %r11, %r12                       # r12 = ptr
    subq   %r9, %r12                        # r12 = ptr - end
    jg     L7                               # ptr > end, then exit loop
    mrmovq (%r11), %r12                     # r12 = M[ptr]
    addq   %r12, %rax                       # sum += *ptr
    rrmovq %rax, %r12                       # r12 = sum
    subq   %r13, %r12                       # r12 = sum - rightsum
    jle    L6                               # if (sum <= rightsum), jumpt to L6
    rrmovq %rax, %r13                       # right_sum = sum
    rmmovq %r11, (%rcx)                     # *sa_end = ptr
L6:
    addq   %r8, %r11                        # ptr++
    jmp    L5                               # jump to first instruction in the loop
L7:
    addq   %r10, %r13                       # r13 has bestsum, bestsum = leftsum + rightsum
    rrmovq %rcx, %r14                       # r14 = address holding max array's ending address
    rrmovq %rsi, %r9                        # r9 = arraySize
    subq   %rbx, %r9                        # r9 = arraySize - half
    rrmovq %rdx, %r12                       # r12 = address holding max array's starting address
    rrmovq %rbx, %rsi                       # rsi = half (array size for next maxsa call is half)
    rrmovq %r9, %rbx                        # rbx = arraySize - half
    pushq  %rdx                             # push rdx to stack
    rrmovq %rsp, %rdx                       # rdx = &(long* sub_start)
    pushq  %rcx                             # push rcx to stack
    rrmovq %rsp, %rcx                       # rcx = &(long* sub_end)
    call   maxSubArray                      # sum = maxsa(array, half, &sub_start, &sub_end);
    popq   %rcx                             # pop rcx from stack
    popq   %rdx                             # pop rdx from stack
    rrmovq %rax, %r9                        # r9 = sum returned from 1st maxsa call
    subq   %r13, %r9                        # r9 = sum - bestsum
    jle    L8                               # if sum <= bestsum, then go to L8
    rrmovq %rax, %r13                       # else bestsum = sum
    rmmovq %rdx, (%r12)                     # *sa_start = sub_start
    rmmovq %rcx, (%r14)                     # *sa_end = sub_end
L8:
    rrmovq %rbp, %rdi                       # rdi = mid
    rrmovq %rbx, %rsi                       # rsi = arraySize - half
    pushq  %rdx                             # push rdx to stack
    rrmovq %rsp, %rdx                       # rdx = &(long* sub_start)
    pushq  %rcx                             # push rcx to stack
    rrmovq %rsp, %rcx                       # rcx = &(long* sub_end)
    call   maxSubArray                      # sum = maxsa(mid, size - half, &sub_start, &sub_end);
    popq   %rcx                             # pop rcx from stack
    popq   %rdx                             # pop rdx from stack
    rrmovq %rax, %r9                        # r9 = sum returned from 2nd maxsa call
    subq   %r13, %r9                        # r9 = sum - bestsum
    jle    L9                               # if sum <= bestsum, then go to L9
    rrmovq %rax, %r13                       # else bestsum = sum
    rmmovq %rdx, (%r12)                     # *sa_start = sub_start
    rmmovq %rcx, (%r14)                     # *sa_end = sub_end
L9:
    rrmovq %r13, %rax                       # sum = value of first element in array
    popq   %r14                             # pop r14
    popq   %r13                             # pop r13
    popq   %r12                             # pop r12
    popq   %rbp                             # pop rbp
    popq   %rbx                             # pop rbx
    ret                                     # return
    
    
.pos 0x2000
array:
    .quad 13
    .quad -3
    .quad -25
    .quad -20
    .quad -3
    .quad -16
    .quad -23
    .quad 18
    .quad 20
    .quad -7
    .quad 12
    .quad -5
    .quad -22
    .quad 15
    .quad -4
    .quad 7
arraySize:
    .quad 16

.pos 0x2500
resultStart:
    .quad 0
resultEnd:
    .quad 0
resultSum:
    .quad 0

.pos 0x4000
stack:
    .quad 0, 1000
stackEnd:
    .quad 0

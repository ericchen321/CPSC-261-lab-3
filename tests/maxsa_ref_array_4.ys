.pos 0x100
main:
    irmovq $stackEnd, %rsp
    irmovq $array, %rdi
    irmovq $arraySize, %rsi
    mrmovq (%rsi), %rsi
    irmovq $resultStart, %rdx
    irmovq $resultEnd, %rcx
    call   maxSubArray
    irmovq $resultSum, %r8
    rmmovq %rax, (%r8)
    halt

.pos 0x1000
maxSubArray:
    pushq  %rbx
    pushq  %rbp
    pushq  %r12
    pushq  %r13
    pushq  %r14
    irmovq $1, %r9
    subq   %rsi, %r9
    jne    L1                                # if (size != 1), then jump to L1
    rmmovq %rdi, (%rcx)
    rmmovq %rdi, (%rdx)
    mrmovq (%rdi), %r13
    jmp    L9
L1:
    irmovq $2, %r10
    rrmovq %rsi, %rbx
    divq   %r10, %rbx                       # rbx has half, half = size >> 1
    irmovq $8, %rbp                         # rbp = 8
    mulq   %rbx, %rbp                       # rbp = 8 * half (offset)
    addq   %rdi, %rbp                       # rbp is long* mid, rbp = array base + offset
    irmovq $8, %r8                          # r8 = 8
    rrmovq %rsi, %r9                        # r9 has array size
    mulq   %r8, %r9                         # r9 = 8 * array size (size offset)
    addq   %rdi, %r9                        # r9 = array base + size offset
    subq   %r8, %r9                         # r9 is long* end, r9 = array + base + size offset - 1
    xorq   %rax, %rax                       # rax has sum, sum = 0
    irmovq $0x8000000000000000, %r10        # r10 has left_sum, leftsum = LONG_MIN
    rrmovq %rbp, %r11
    subq   %r8, %r11                        # r11 has ptr, ptr = mid - 1


L2:                                         # loop: for (ptr = mid - 1, sum = 0; ptr >= array; ptr--)
    rrmovq %r11, %r12
    subq   %rdi, %r12
    jl     L4                               # ptr < array, exit loop
    mrmovq (%r11), %r12
    addq   %r12, %rax
    rrmovq %rax, %r12
    subq   %r10, %r12
    jle    L3                               # if (sum <= leftsum), jump to L3
    rrmovq %rax, %r10                       # left_sum = sum
    rmmovq %r11, (%rdx)                     # *sa_start = ptr
L3:
    subq   %r8, %r11                        # ptr-- 
    jmp    L2                               # jump to first instruction in the loop


L4:
    irmovq $0x8000000000000000, %r13        # r13 has right_sum, right_sum = LONG_MIN
    rrmovq %rbp, %r11                       # r11 has ptr, ptr = mid
    xorq   %rax, %rax                       


L5:                                         # loop: for (ptr = mid, sum = 0; ptr <= end; ptr++)
    rrmovq %r11, %r12
    subq   %r9, %r12
    jg     L7                               # ptr > end, then exit loop
    mrmovq (%r11), %r12
    addq   %r12, %rax
    rrmovq %rax, %r12
    subq   %r13, %r12
    jle    L6                               # if (sum <= rightsum), jumpt to L6
    rrmovq %rax, %r13                       # right_sum = sum
    rmmovq %r11, (%rcx)                     # *sa_end = ptr
L6:
    addq   %r8, %r11                        # ptr++
    jmp    L5                               # jump to first instruction in the loop
L7:
    addq   %r10, %r13
    rrmovq %rcx, %r14
    rrmovq %rsi, %r9
    subq   %rbx, %r9
    rrmovq %rdx, %r12
    rrmovq %rbx, %rsi
    rrmovq %r9, %rbx
    pushq  %rdx
    rrmovq %rsp, %rdx
    pushq  %rcx
    rrmovq %rsp, %rcx
    call   maxSubArray
    popq   %rcx
    popq   %rdx
    rrmovq %rax, %r9
    subq   %r13, %r9
    jle    L8
    rrmovq %rax, %r13
    rmmovq %rdx, (%r12)
    rmmovq %rcx, (%r14)
L8:
    rrmovq %rbp, %rdi
    rrmovq %rbx, %rsi
    pushq  %rdx
    rrmovq %rsp, %rdx
    pushq  %rcx
    rrmovq %rsp, %rcx
    call   maxSubArray
    popq   %rcx
    popq   %rdx
    rrmovq %rax, %r9
    subq   %r13, %r9
    jle    L9
    rrmovq %rax, %r13
    rmmovq %rdx, (%r12)
    rmmovq %rcx, (%r14)
L9:
    rrmovq %r13, %rax
    popq   %r14
    popq   %r13
    popq   %r12
    popq   %rbp
    popq   %rbx
    ret

.pos 0x2000
array:
    .quad -100
    .quad -2
    .quad -4
    .quad -9
    .quad -1
    .quad -44
    .quad -55
    .quad -71
    .quad -141
    .quad -93
    .quad -2
    .quad -2
    .quad -4
    .quad -3
    .quad -5
    .quad -7
    .quad -930
arraySize:
    .quad 17

.pos 0x2500
resultStart:
    .quad 0
resultEnd:
    .quad 0
resultSum:
    .quad 0

.pos 0x2600
reference:
     .quad 0x2020
     .quad 0x2020
     .quad -1

.pos 0x4000
stack:
    .quad 0, 1000
stackEnd:
    .quad 0